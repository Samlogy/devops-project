name: Node App CI/CD
on:
  # add event trigger pipeline => push / pull ...
  push:
    branches:
      - main
      - dev

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_EC2_KEY: ${{ secrets.AWS_EC2_KEY }}
  AWS_EC2_USERNAME: ${{ secrets.AWS_EC2_USERNAME }}
  AWS_EC2_IP: ${{ secrets.AWS_EC2_IP }}

jobs:
  # config:
  #   name: Config & Setup => Eslint/Prettier
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [18.x, 20.x]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Use Node.js ${{ matrix.node-version }} to Check Lint
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: "npm"

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: check format / rules
  #       run: npm run check:all

  # build:
  #   name: Build App
  #   needs: config
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Use Node.js 20.x to run Test
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.x
  #         cache: "npm"

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Run build
  #       run: npm run build

  # tests:
  #   name: Run Tests
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Use Node.js 20.x to run Test
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.x
  #         cache: "npm"

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Run Tests
  #       run: npm run test

  # sonar:
  #   name: Run Sonar => quality code
  #   needs: tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Use Node.js 20.x to run Test
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.x
  #         cache: "npm"

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Run Quality Test
  #       run: npm run sonar

  # synk:
  #   name: Run Synk => check vulnerabilty code
  #   needs: sonar
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Use Node.js 20.x to run Test
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.x
  #         cache: "npm"

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Run Vulnerability Test
  #       run: npm run synk

  ci:
    name: Login Docker Hub => Build & Push Docker image
    # needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker HUB
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t sammmmmm/node-app ./app

      - name: Push image to Docker HUB
        run: docker push sammmmmm/node-app:latest

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and push
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKER_USERNAME }}/clockbox:latest

  cd:
    needs: ci
    runs-on: self-hosted
    steps:
      - name: Pull Docker image
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_EC2_KEY }} ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_IP }} 'sudo docker pull ${{ secrets.DOCKER_USERNAME }}/node-app:latest'

      - name: Stop running container
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_EC2_KEY }} ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_IP }} 'sudo docker stop node-app || true'
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_EC2_KEY }} ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_IP }} 'sudo docker rm -f node-app || true'

      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_EC2_KEY }} ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_IP }} 'sudo docker run -d --name node-app -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/node-app:latest'

    # - name: Connect to EC2 instance
    #   run: ssh ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_IP }} -i ${{ secrets.AWS_PRIVATE_KEY }} -p ${{secrets.AWS_EC2_PORT}}
    
    # - name: Login to Docker HUB
    #   run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

    # - name: Pull image from docker hub
    #   run: docker pull ${{ secrets.DOCKER_USERNAME }}/node-app:latest

    # - name: Delete old container
    #   run: docker rm -f node-app:latest

    # - name: Run docker container
    #   run: docker run -d -p 3000:3000 --name node-app ${{ secrets.DOCKER_USERNAME }}/node-app:latest